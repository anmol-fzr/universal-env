import l from"fs";import s from"path";import"zod";import{validateEnv as p}from"@universal-env/core";function g({schema:n,envPath:t=".env",outputPath:r="vite-env.d.ts"}){return{name:"universal-env",apply:"serve",async configureServer(e){let a=s.resolve(t),c=s.resolve(r),o=async()=>{let i=m(l.readFileSync(a,"utf-8"));await p({schema:n,rawEnv:i,path:c,wrapper:`
/// <reference types="vite/client" />

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

// AUTO-GENERATED BY universal-env
// DO NOT EDIT BELOW THIS LINE
type ImportMetaEnv {{content}}
`})};await o(),e.watcher.add(a),e.watcher.on("change",async i=>{if(i===a){console.log(`[env-validator] ${t} changed. Validating...`);try{await o(),console.log("[env-validator] \u2705 Env validated successfully.")}catch(v){console.error("[env-validator] \u274C Validation failed:",v)}}})}}}function m(n){return Object.fromEntries(n.split(`
`).map(t=>t.trim()).filter(t=>t&&!t.startsWith("#")).map(t=>{let[r,...e]=t.split("=");return[r.trim(),e.join("=").trim()]}))}export{g as universalEnv};
