"use strict";var f=Object.create;var i=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var w=(e,t)=>{for(var n in t)i(e,n,{get:t[n],enumerable:!0})},v=(e,t,n,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of y(t))!h.call(e,r)&&r!==n&&i(e,r,{get:()=>t[r],enumerable:!(a=E(t,r))||a.enumerable});return e};var l=(e,t,n)=>(n=e!=null?f(g(e)):{},v(t||!e||!e.__esModule?i(n,"default",{value:e,enumerable:!0}):n,e)),O=e=>v(i({},"__esModule",{value:!0}),e);var T={};w(T,{universalEnv:()=>I});module.exports=O(T);var p=l(require("fs"),1),s=l(require("path"),1),D=require("zod"),m=require("@universal-env/core");function I({schema:e,envPath:t=".env",outputPath:n="vite-env.d.ts"}){return{name:"universal-env",apply:"serve",async configureServer(a){let r=s.default.resolve(t),u=s.default.resolve(n),c=async()=>{let o=P(p.default.readFileSync(r,"utf-8"));await(0,m.validateEnv)({schema:e,rawEnv:o,path:u,wrapper:`
/// <reference types="vite/client" />

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

// AUTO-GENERATED BY universal-env
// DO NOT EDIT BELOW THIS LINE
type ImportMetaEnv {{content}}
`})};await c(),a.watcher.add(r),a.watcher.on("change",async o=>{if(o===r){console.log(`[env-validator] ${t} changed. Validating...`);try{await c(),console.log("[env-validator] \u2705 Env validated successfully.")}catch(d){console.error("[env-validator] \u274C Validation failed:",d)}}})}}}function P(e){return Object.fromEntries(e.split(`
`).map(t=>t.trim()).filter(t=>t&&!t.startsWith("#")).map(t=>{let[n,...a]=t.split("=");return[n.trim(),a.join("=").trim()]}))}0&&(module.exports={universalEnv});
