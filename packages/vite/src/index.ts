import fs from "node:fs";
import path from "node:path";
import type { Plugin } from "vite";
import { z } from "zod";
import { validateEnv } from "@universal-env/core";


export function universalEnv({
  schema,
  envPath = ".env",
  outputPath = "vite-env.d.ts",
}: {
  schema: z.ZodObject<any>;
  envPath?: string;
  outputPath?: string;
}): Plugin {
  return {
    name: "universal-env",
    apply: "serve", // run only in dev mode (optional)

    async configureServer(server) {
      const absEnvPath = path.resolve(envPath);
      const absOutputPath = path.resolve(outputPath);

      const runValidation = async () => {
        const rawEnv = parseDotEnv(fs.readFileSync(absEnvPath, "utf-8"));
        await validateEnv({
          schema,
          rawEnv,
          path: absOutputPath,
          wrapper: `
/// <reference types="vite/client" />

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

// AUTO-GENERATED BY universal-env
// DO NOT EDIT BELOW THIS LINE
type ImportMetaEnv {{content}}
`  as any,
        });
      };

      // Initial validation
      await runValidation();

      // Watch for changes to .env file
      server.watcher.add(absEnvPath);
      server.watcher.on("change", async (changedFile) => {
        if (changedFile === absEnvPath) {
          console.log(`[env-validator] ${envPath} changed. Validating...`);
          try {
            await runValidation();
            console.log("[env-validator] ✅ Env validated successfully.");
          } catch (err) {
            console.error("[env-validator] ❌ Validation failed:", err);
          }
        }
      });
    },
  };
}

// Simple .env parser
function parseDotEnv(envRaw: string): Record<string, string> {
  return Object.fromEntries(
    envRaw
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line && !line.startsWith("#"))
      .map((line) => {
        const [key, ...rest] = line.split("=");
        return [key.trim(), rest.join("=").trim()];
      })
  );
}
